//IRSensor 
#define LED 18
#define IRSensor 14

void setup()
{
	Serial.begin(9600);
	pinMode(LED,OUTPUT);
	pinMode(IRSensor,INPUT);
}
void loop()
{
	int irValue = digitalRead(IRSensor);
	if (irValue == LOW)
	{
		Serial.print(1);
		digitalWrite(LED,HIGH);
		delay(500);
		digitalWrite(LED,LOW);
	}
	else
	{
		Serial.print(0);
		digitalWrite(LED,LOW);
		delay(200);
	}
}

//////////////////////////////////////////////////
//Light Sensor
#define LIGHT_SENSOR_PIN 36 // ESP32 pin GIOP36 (ADC0)

void setup() {
  Serial.begin(9600);
  analogSetAttenuation(ADC_11db);
}

void loop() {
  int analogValue = analogRead(LIGHT_SENSOR_PIN);

  Serial.print("Analog Value = ");
  Serial.print(analogValue);   // the raw analog reading

  if (analogValue < 40) {
    Serial.println(" => Dark");
  } else if (analogValue < 800) {
    Serial.println(" => Dim");
  } else if (analogValue < 2000) {
    Serial.println(" => Light");
  } else if (analogValue < 3200) {
    Serial.println(" => Bright");
  } else {
    Serial.println(" => Very bright");
  }

  delay(500);
}
//////////////////////////////////////////////////

//fixed_ir_pir.ino
int IRSensor=13;
int MotionSensor = 14;
const int LED = 35;
int LEDstate = LOW;
int Pinstatecurrent = LOW;
int Pinstateprevious = LOW;
void setup(){
  pinMode (LED,OUTPUT);
  pinMode (IRSensor,INPUT);
  pinMode (MotionSensor ,INPUT);
  Serial.begin(9600);
}
void loop(){
  delay(1000);
  Pinstateprevious = Pinstatecurrent;
  Pinstatecurrent = digitalRead(MotionSensor);
  if(Pinstatecurrent == HIGH && Pinstateprevious == LOW ){
    Serial.println("Motion Detected");
    int statussensor = digitalRead(IRSensor);
    digitalWrite(LED,HIGH);
    delay(2500);
    if(statussensor==0){
      Serial.println("Person detected but height matched");
    }
    else{
      Serial.println("Person detected and height not matched");
    }
  }
  if(Pinstateprevious ==Pinstatecurrent){
    Serial.println("No Motion Detected");
    digitalWrite(LED,LOW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////

// Digital Sensor Read 
#include <DHT.h>
#define DHT11_PIN  21 // ESP32 pin GPIO21 connected to DHT11 sensor

DHT dht11(DHT11_PIN, DHT11);

void setup() {
  Serial.begin(9600);
  dht11.begin(); // initialize the DHT11 sensor
}

void loop() {
  // read humidity
  float humi  = dht11.readHumidity();
  // read temperature in Celsius
  float tempC = dht11.readTemperature();
  // read temperature in Fahrenheit
  float tempF = dht11.readTemperature(true);

  // check whether the reading is successful or not
  if ( isnan(tempC) || isnan(tempF) || isnan(humi)) {
    Serial.println("Failed to read from DHT11 sensor!");
  } else {
    Serial.print("Humidity: ");
    Serial.print(humi);
    Serial.print("%");

    Serial.print("  |  ");

    Serial.print("Temperature: ");
    Serial.print(tempC);
    Serial.print("°C  ~  ");
    Serial.print(tempF);
    Serial.println("°F");
  }

  // wait a 2 seconds between readings
  delay(2000);
}

////////////////////////////////////////////////////////////////////////////////////////////
//PIR Sensor
const int PIN_TO_SENSOR = 19; // GPIO19 pin connected to OUTPUT pin of sensor
int pinStateCurrent   = LOW;
int pinStatePrevious  = LOW;

void setup() {
  Serial.begin(9600);            // initialize serial
  pinMode(PIN_TO_SENSOR, INPUT); // set ESP32 pin to input mode to read value from OUTPUT pin of sensor
}

void loop() {
  pinStatePrevious = pinStateCurrent; // store old state
  pinStateCurrent = digitalRead(PIN_TO_SENSOR);   // read new state

  if (pinStatePrevious == LOW && pinStateCurrent == HIGH) {   // pin state change: LOW -> HIGH
    Serial.println("Motion detected!");
    // TODO: turn on alarm, light or activate a device ... here
  }
  else
  if (pinStatePrevious == HIGH && pinStateCurrent == LOW) {   // pin state change: HIGH -> LOW
    Serial.println("Motion stopped!");
    // TODO: turn off alarm, light or deactivate a device ... here
  }
}

////////////////////////////////////////////////////////////////////////////////////////////
String receivedMessage = ""; // Variable to store the incoming message

void setup() {
  Serial.begin(115200); // Initialize serial communication at 115200 baud rate
  Serial.println("ESP32 is ready. Please enter a message:"); // Print initial message
}

void loop() {
  // Read from Serial
  while (Serial.available()) { // Check if data is available in the serial buffer
    char incomingChar = Serial.read(); // Read each character from the buffer

    if (incomingChar == '\n') { // Check for newline character (Enter key)
      Serial.print("You sent: "); // Print a prefix
      Serial.println(receivedMessage); // Print the received message
      receivedMessage = ""; // Clear the buffer for the next message
    } else {
      receivedMessage += incomingChar; // Append the character to the message string
    }
  }

  // Write to Serial (example: send a message every 5 seconds)
  static unsigned long lastSendTime = 0;
  if (millis() - lastSendTime > 5000) { // Check if 5 seconds have passed
    Serial.println("Hello from ESP32!"); // Send a message
    lastSendTime = millis(); // Update the last send time
  }
}


////////////////////////////////////////////////////////////////////////////////////////////
Serial port communication using ESP32

String receivedMessage = "";
void setup() {
Serial.begin(9600);

// Print an initial message to the Serial Monitor
Serial.println("ESP32 is ready. Please enter a message:");
}

void loop() {
// put your main code here, to run repeatedly:
while (Serial.available()) {
char incomingChar = Serial.read(); // Read each character from the buffer

if (incomingChar == '\n') { // Check if the user pressed Enter (new line character)
// Print the message
Serial.print("You sent: ");
Serial.println(receivedMessage);

// Clear the message buffer for the next input

receivedMessage = "";
} else {
// Append the character to the message string
receivedMessage += incomingChar;
}
}
}

//////////////////////////////////////////////////////////////
//Light Dependent Resistor
#define DO_PIN 13 

void setup() {
// initialize serial communication
Serial.begin(9600);
// initialize the ESP32's pin as an input
pinMode(DO_PIN, INPUT);
}

void loop() {
int lightState = digitalRead(DO_PIN);

if (lightState == HIGH)
Serial.println("It is dark");
else
Serial.println("It is light");
delay(1000);
}

///////////////////////////////////////////////////////////////

1. Traffic Light Simulation with Violation Alert

#define RED_LED    23
#define YELLOW_LED 22
#define GREEN_LED  21
#define IR_SENSOR  19

void setup() {
  pinMode(RED_LED, OUTPUT);
  pinMode(YELLOW_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(IR_SENSOR, INPUT);
  Serial.begin(9600);
}

void loop() {
  // RED SIGNAL
  digitalWrite(RED_LED, HIGH);
  digitalWrite(YELLOW_LED, LOW);
  digitalWrite(GREEN_LED, LOW);
  Serial.println("Signal: RED");

  for (int i = 0; i < 5; i++) { // Check for 5 seconds
    if (digitalRead(IR_SENSOR) == LOW) {
      Serial.println("Vehicle Crossed on RED!");
    }
    delay(1000);
  }

  // GREEN SIGNAL
  digitalWrite(RED_LED, LOW);
  digitalWrite(GREEN_LED, HIGH);
  Serial.println("Signal: GREEN");
  delay(5000);

  // YELLOW SIGNAL
  digitalWrite(GREEN_LED, LOW);
  digitalWrite(YELLOW_LED, HIGH);
  Serial.println("Signal: YELLOW");
  delay(2000);
}


2. Smart Room Climate Monitor

#include <DHT.h>

// Pin Definitions
#define DHTPIN     15        // DHT22 sensor connected to GPIO15
#define DHTTYPE    DHT22     // DHT22 type sensor
#define ALERT_LED  25        // LED for alert indication

// Initialize DHT Sensor
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);        // Start Serial Monitor
  dht.begin();               // Initialize DHT22
  pinMode(ALERT_LED, OUTPUT); // Set alert LED pin as output
  Serial.println("Room Climate Monitor Initialized...");
}

void loop() {
  // Read temperature and humidity from DHT22
  float temp = dht.readTemperature();     // in Celsius
  float hum  = dht.readHumidity();        // in percentage

  // Check if sensor reading failed
  if (isnan(temp) || isnan(hum)) {
    Serial.println("Failed to read from DHT22 sensor!");
    return;
  }

  // Print readings
  Serial.print("Temp: ");
  Serial.print(temp);
  Serial.print(" °C, Humidity: ");
  Serial.print(hum);
  Serial.print("%");

  // Check threshold conditions
  if (temp > 32 || hum < 35) {
    Serial.println(" – ALERT: High Temp/Low Humidity.");
    digitalWrite(ALERT_LED, HIGH); // Turn ON alert LED
  } else {
    Serial.println(" – OK");
    digitalWrite(ALERT_LED, LOW); // Turn OFF alert LED
  }

  delay(2000); // Delay between readings
}



3. Motion-Based Smart Lighting

#define PIR_SENSOR  27
#define LDR_PIN     36  // Analog pin
#define LIGHT_LED   26

void setup() {
  Serial.begin(9600);
  pinMode(PIR_SENSOR, INPUT);
  pinMode(LIGHT_LED, OUTPUT);
}

void loop() {
  int motion = digitalRead(PIR_SENSOR);
  int lightValue = analogRead(LDR_PIN);

  if (motion == HIGH && lightValue < 1000) {
    digitalWrite(LIGHT_LED, HIGH);
    Serial.println("Light ON – Motion detected at low brightness.");
  } else {
    digitalWrite(LIGHT_LED, LOW);
    if (lightValue >= 1000)
      Serial.println("Light OFF – Sufficient light.");
    else
      Serial.println("Light OFF – No motion.");
  }

  delay(500);
}


4. Greenhouse Automation Prototype

#include <DHT.h>
#define DHTPIN  13
#define DHTTYPE DHT11
#define LDR_PIN  34
#define FAN_LED  32

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  dht.begin();
  pinMode(FAN_LED, OUTPUT);
}

void loop() {
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();
  int lightVal = analogRead(LDR_PIN);

  Serial.print("Temp: "); Serial.print(temp);
  Serial.print("°C, Humidity: "); Serial.print(hum);
  Serial.print("%, Light: "); Serial.println(lightVal);

  if (temp > 35) {
    digitalWrite(FAN_LED, HIGH);
    Serial.println("Fan ON – High temperature!");
  } else {
    digitalWrite(FAN_LED, LOW);
  }

  if (lightVal < 800) {
    Serial.println("LOW LIGHT – Use Grow Lights.");
  }

  delay(2000);
}


5. Door Security Alert System

#define PIR_SENSOR 14
#define IR_SENSOR  12
#define ALERT_LED  33

bool lockedMode = true; // Simulate locked door

void setup() {
  Serial.begin(9600);
  pinMode(PIR_SENSOR, INPUT);
  pinMode(IR_SENSOR, INPUT);
  pinMode(ALERT_LED, OUTPUT);
}

void loop() {
  int motion = digitalRead(PIR_SENSOR);
  int ir = digitalRead(IR_SENSOR);

  if (lockedMode && motion == HIGH && ir == LOW) {
    digitalWrite(ALERT_LED, HIGH);
    Serial.println("ALERT: Unauthorized Entry Detected!");
  } else {
    digitalWrite(ALERT_LED, LOW);
  }

  delay(1000);
}


6. User-Defined Light Preference Controller

#define LIGHT_SENSOR_PIN 36
int userThreshold = 2000;
String inputBuffer = "";

void setup() {
  Serial.begin(115200);
  analogSetAttenuation(ADC_11db);
  Serial.println("Enter your brightness preference (0–4095):");
}

void loop() {
  while (Serial.available()) {
    char c = Serial.read();
    if (c == '\n') {
      userThreshold = inputBuffer.toInt();
      Serial.print("Threshold set to: ");
      Serial.println(userThreshold);
      inputBuffer = "";
    } else {
      inputBuffer += c;
    }
  }

  int lightLevel = analogRead(LIGHT_SENSOR_PIN);
  Serial.print("Current Brightness: ");
  Serial.print(lightLevel);

  if (lightLevel <= userThreshold) {
    Serial.println(" – Brightness within preferred range.");
  } else {
    Serial.println(" – Brightness exceeds user preference.");
  }

  delay(1000);
}

